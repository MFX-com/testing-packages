name: Build docker images

on:
  push:
    branches:
      - developmentuz
      - staginz
      - mainz

env:
  FIRST_IMAGE: "ghcr.io/mfx-com/testing-packages/apps/first-app"
  SECOND_IMAGE: "ghcr.io/mfx-com/testing-packages/apps/second-app"

jobs:
  prepare-environment:
    name: Prepare environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.17 ]
        pnpm-version: [ 8.15.6 ]
    #        apps:
    #          - { name: first, image: first-app }
    #          - { name: second, image: second-app }
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      #      - name: Maximize build disk space
      #        uses: easimon/maximize-build-space@v7
      #        with:
      #          root-reserve-mb: 512
      #          swap-size-mb: 1024
      #          remove-dotnet: 'true'
      #          remove-android: 'true'
      #          remove-haskell: 'true'
      #          remove-codeql: 'true'

      #      - name: Free Up GitHub Actions Ubuntu Runner Disk Space ðŸ”§
      #        uses: jlumbroso/free-disk-space@main
      #        with:
      #          # This might remove tools that are actually needed, if set to "true" but frees about 6 GB
      #          tool-cache: false
      #          # All of these default to true, but feel free to set to "false" if necessary for your workflow
      #          android: true
      #          dotnet: true
      #          haskell: true
      #          large-packages: false
      #          swap-storage: true

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - uses: pnpm/action-setup@v3.0.0
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          node-version: ${{ matrix.node-version }}

#      - name: Replace data sources
#        shell: bash
#        run: |
#          loki_ds="${{ secrets.GRAFANA_LOKI_DEV }}"
#
#          find deploy/grafana/**/*.json -type f -exec sed -i -e "s/\${DS_LOKI}/$loki_ds/g" {} +

      - name: Set Loki data source
        id: datasource
        shell: bash
        run: |
          loki_ds="${{ secrets.GRAFANA_LOKI_DEV }}"
          version=$(date +%d.%m.%Y-%H-%M-%S)
          echo $version
          echo $loki_ds
          echo "loki_ds=$loki_ds" >> $GITHUB_OUTPUT

      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${DS_LOKI}
          replace: ${{ steps.datasource.outputs.loki_ds }}
          regex: false

      - name: Check normal json
        shell: bash
        run: |
          cat deploy/grafana/dashboards/api.json

      - name: Check DEV json
        shell: bash
        run: |
          cat deploy/grafana/env-dev/dashboards/vitest-ui.json

      #  docker-build:
      #    name: Docker build
      #    runs-on: ubuntu-latest
      #    needs:
      #      - prepare-environment
      #    strategy:
      #      matrix:
      #        apps:
      #          - { name: first, image: first-app }
      #          - { name: second, image: second-app }
      #    env:
      #      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      #    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      #      - uses: jpribyl/action-docker-layer-caching@v0.1.1
      #        # Ignore the failure of a step and avoid terminating the job.
      #        continue-on-error: true

      - name: Check if first image exists
        run: |
          echo "YEP 1"

      - name: Check if second image exists
        run: |
          echo "YEP 2"

      - name: Get latest built image hash for branch
        run: |
          echo "SHA is same as from PR commit?"

#      - name: Run docker build FIRST
#        run: |
#          pnpm run docker:first -t ${{ env.FIRST_IMAGE }}:${{ github.sha }}-${{ steps.extract_branch.outputs.branch }}
#
#      - name: Run docker build SECOND
#        run: |
#          pnpm run docker:second -t ${{ env.SECOND_IMAGE }}:${{ github.sha }}-${{ steps.extract_branch.outputs.branch }}

#      - name: Run docker build
#        run: |
#          pnpm run docker:${{ matrix.apps.name }} -t ghcr.io/mfx-com/testing-packages/apps/${{ matrix.apps.image }}:${{ github.sha }}-${{ steps.extract_branch.outputs.branch }}

#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Push docker images
#        run: |
#          docker push ghcr.io/mfx-com/testing-packages/apps/${{ matrix.apps.image }}:${{ github.sha }}-${{ steps.extract_branch.outputs.branch }}

#      - name: Push docker images
#        run: |
#          docker push ${{ env.FIRST_IMAGE }}:${{ github.sha }}-${{ steps.extract_branch.outputs.branch }}
#          docker push ${{ env.SECOND_IMAGE }}:${{ github.sha }}-${{ steps.extract_branch.outputs.branch }}
