name: Build FIRST docker image

on:
  pull_request:
    branches:
      - mainz
      - stagingz
      - developmentz

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-first
  cancel-in-progress: true

env:
  FIRST_IMAGE: "ghcr.io/mfx-com/testing-packages/apps/first-app"
  NODE_VERSION: 20.12.0
  PNPM_VERSION: 8.15.6

jobs:
  prepare-environment:
    name: Prepare environment for first image
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Get pull request number
        run: |
          echo The PR ${{ github.event.pull_request.number }} was updated!

      - uses: actions/checkout@v4 # v4
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"


      - uses: pnpm/action-setup@v3.0.0
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          node-version: ${{ env.NODE_VERSION }}

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

#      - uses: jpribyl/action-docker-layer-caching@v0.1.1
#        # Ignore the failure of a step and avoid terminating the job.!
#        continue-on-error: true
#        with:
#          key: first-docker-cache-${{ github.event.pull_request.number }}
#          restore-keys: |
#            first-docker-cache-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Pull docker layers
        continue-on-error: true
        run: |
          docker pull ${{ env.FIRST_IMAGE }}:${{ github.event.pull_request.number }}-${{ steps.extract_branch.outputs.branch }}

      - name: Run docker build FIRST
        run: |
          pnpm run docker:first -t ${{ env.FIRST_IMAGE }}:${{ github.event.pull_request.number }}-${{ steps.extract_branch.outputs.branch }}

      - name: Push docker images
        run: |
          docker push ${{ env.FIRST_IMAGE }}:${{ github.event.pull_request.number }}-${{ steps.extract_branch.outputs.branch }}
