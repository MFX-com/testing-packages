name: SDK Release

on:
  push:
    branches:
      - main
      - staging
      - development

jobs:
  versions:
    name: Versions
    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        node-version: [ 18.17 ]
#        pnpm-version: [ 8.9.2 ]
#        apps:
#          - api
#          - cms
#    environment:
#      name: ${{ matrix.apps }}-dev
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      NODE_VERSION: 20.9.0
      PNPM_VERSION: 8.9.2
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
#          token: ${{ steps.generate_token.outputs.token }}
          token: ${{ secrets.GITHUB_TOKEN }}
#          persist-credentials: false

#      - name: Config git user
#        run: |
#          git config --global user.name "${{ github.actor }}"
#          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

#      - name: Config git user
#        run: |
#          git config --global user.name "github-actions[bot]"
#          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

#      - name: Config git user
#        shell: bash
#        run: |
#          git config --global user.name "nexera-release[bot]"
#          git config --global user.email "137495321+nexera-release[bot]@users.noreply.github.com"
#          git remote set-url origin https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$GITHUB_REPOSITORY

      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        id: pnpm-install
        with:
#          version: ${{ matrix.pnpm-version }}
          version: ${{ env.PNPM_VERSION }}
          run_install: false

#      - name: Get pnpm store directory
#        id: pnpm-cache
#        run: |
#          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

#      - uses: actions/cache@v3
#        name: Setup pnpm cache
#        with:
#          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
#          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#          restore-keys: |
#            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
#          node-version: ${{ matrix.node-version }}
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: |
          pnpm install --no-frozen-lockfile

#      - name: Bump versions
#        run: |
#          lerna version --conventional-commits --no-git-tag-version --yes

#      - name: Bump versions
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          lerna version --yes --changelog-preset=angular --conventional-commits --message 'chore(release): version and release commit'

#      - name: Bump versions
#        env:
#          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
#        run: |
#          lerna version --yes --no-commit-hooks

#      - name: Update settings
#        shell: bash
#        run: |
#          curl -L \
#          -H "Accept: application/vnd.github+json" \
#          -H "Authorization: token ${{ secrets.BOT_ACCESS_TOKEN }}"\
#          -H "X-GitHub-Api-Version: 2022-11-28" \
#            https://api.github.com/repos/mfx-com/testing-packages \
#          -d '{"enforce_admins":false}' \
#          --output /dev/null
      - name: Show commit
        run: |
          commit_message=$(git show -s --format=%s)
          echo $commit_message

      - name: Bump versions
        if: ${{ github.ref == 'refs/heads/development' }}
        shell: bash
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config --global user.name "nexera-release[bot]"
          git config --global user.email "137495321+nexera-release[bot]@users.noreply.github.com"

          lerna version --yes

#      - name: Update settings
#        shell: bash
#        run: |
#          curl -L \
#          -H "Accept: application/vnd.github+json" \
#          -H "Authorization: token ${{ secrets.BOT_ACCESS_TOKEN }}"\
#          -H "X-GitHub-Api-Version: 2022-11-28" \
#            https://api.github.com/repos/mfx-com/testing-packages \
#          -d '{"enforce_admins":true}' \
#          --output /dev/null

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
#      - name: Dump matrix context
#        env:
#          MATRIX_CONTEXT: ${{ toJson(matrix) }}
#        run: echo "$MATRIX_CONTEXT"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"


#      - name: Bump versions
#        run: |
#          pnpm run --filter "@mfx-com/first" bump
#          pnpm run --filter "@mfx-com/private" bump
#          pnpm run --filter "@mfx-com/second" bump

      # People can bump manually a package in their merge request
      # Once merged to development, it will automatically take it in consideration
      #
      # Otherwise, it will create a patch version
#      - name: Create changeset file
#        shell: bash
#        run: |
#          ls -al
#          touch .changeset/my-commit-message.md
#          cat <<EOF > .changeset/my-commit-message.md
#            ---
#            "@mfx-com/second": patch
#            ---
#
#            AAA
#          EOF
#
#      - name: Bump versions
#        shell: bash
#        run: |
#          echo "Bumping"
#          npx changeset version
#
#      - name: Commit & Push changes
#        uses: actions-js/push@master
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Check version
#        run: |
#          cat packages/first/package.json

#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#          token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Build
#        run: |
#          pnpm run build:@mfx-com/first
#          pnpm run build:@mfx-com/second

#      - name: Check version again
#        run: |
#          cat packages/first/package.json

      - name: Set release tag
        id: tag_release
        run: |
          release_tag="dev"
          
          if [ ${{ github.ref }} == 'refs/heads/staging' ]; then
            echo "staging release"
            release_tag="staging"
          elif [ ${{ github.ref }} == 'refs/heads/main' ]; then
            echo "production release"
            release_tag="latest"
          elif [ ${{ github.ref }} == 'refs/heads/development' ]; then
            echo "dev release"
            release_tag="dev"
          fi
          
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

      - name: Prepare release version
        if: ${{ github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging' }}
        run: |
          version=$(pnpm view "@mfx-com/first" version)
          pnpm pkg set version="$version-${{ steps.tag_release.outputs.release_tag }}" -w "@mfx-com/first"
          
          version=$(pnpm view "@mfx-com/second" version)
          pnpm pkg set version="$version-${{ steps.tag_release.outputs.release_tag }}" -w "@mfx-com/second"
          
          version=$(pnpm view "@mfx-com/pubpack" version)
          pnpm pkg set version="$version-${{ steps.tag_release.outputs.release_tag }}" -w "@mfx-com/pubpack"

#      - name: Publish to npm (dev)
#        if: ${{ github.ref == 'refs/heads/development' }}
#        env:
#          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          pnpm --filter "@mfx-com/first" publish --no-git-checks --registry https://npm.pkg.github.com/ --tag ${{ steps.tag_release.outputs.release_tag }}
#          pnpm --filter "@mfx-com/second" publish --no-git-checks --registry https://npm.pkg.github.com/ --tag ${{ steps.tag_release.outputs.release_tag }}
#
#      - name: Publish to npm (staging)
#        if: ${{ github.ref == 'refs/heads/staging' }}
#        env:
#          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          pnpm --filter "@mfx-com/first" publish --no-git-checks --registry https://npm.pkg.github.com/ --tag ${{ steps.tag_release.outputs.release_tag }}
#          pnpm --filter "@mfx-com/second" publish --no-git-checks --registry https://npm.pkg.github.com/ --tag ${{ steps.tag_release.outputs.release_tag }}

      - name: Publish to npm
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm --filter "@mfx-com/first" publish --no-git-checks --registry https://npm.pkg.github.com/ --tag ${{ steps.tag_release.outputs.release_tag }}
          pnpm --filter "@mfx-com/second" publish --no-git-checks --registry https://npm.pkg.github.com/ --tag ${{ steps.tag_release.outputs.release_tag }}

      - name: Publish to public npm
        env:
          NPMJS_COM_TOKEN: ${{ secrets.NPMJS_COM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPMJS_COM_TOKEN" > .npmrc

          pnpm --filter "@mfx-com/pubpack" publish --access=public --no-git-checks --registry https://registry.npmjs.org/  --tag ${{ steps.tag_release.outputs.release_tag }}

#      - name: Publish to public npm
#        env:
#          NPMJS_COM_TOKEN: ${{ secrets.NPMJS_COM_TOKEN }}
#        run: |
#          echo "//registry.npmjs.org/:_authToken=$NPMJS_COM_TOKEN" > .npmrc
#          pnpm --filter "@mfx-com/first" publish --access=public --no-git-checks --registry https://registry.npmjs.org/
#          pnpm --filter "@mfx-com/second" publish --access=public --no-git-checks --registry https://registry.npmjs.org/


#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@v2
#        if: success()
#        env:
#          SLACK_CHANNEL: nexera-alerts
#          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#          SLACK_ICON: https://avatars.githubusercontent.com/in/351476?s=48
#          SLACK_TITLE: My Title ${{ secrets.APP_ID }}
#          SLACK_MESSAGE: 'Post Content :rocket: ${{ secrets.APP_ID }}'
#          SLACK_USERNAME: nexera-bot
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

#      - name: Export timer variable
#        id: rollout
#        shell: bash
#        run: |
#          echo "rollout_time=$(date +%s%3N)" >> $GITHUB_OUTPUT

#      - name: Set secondary healthcheck URL
#        continue-on-error: true
#        shell: bash
#        id: healthcheck
#        env:
#          SECONDARY_HEALTHCHECK_URL: ${{ vars.HEALTHCHECK_URL_SECONDARY || 'error' }}
#        run: |
#          echo "${{ env.SECONDARY_HEALTHCHECK_URL }}"
#          echo "url=${{ env.SECONDARY_HEALTHCHECK_URL }}" >> $GITHUB_OUTPUT

#      - name: Check service status
#        shell: bash
#        id: health_status
#        run: |
#          echo ${{ steps.rollout.outputs.rollout_time }}
#          # Initial sleep to make sure they are running
#          sleep 5
#
#          attempts=0
#          max_attempts=2
#          while [ $attempts -lt $max_attempts ]; do
#            status_code=$(curl -s -o /dev/null -w '%{http_code}' ${{ vars.HEALTHCHECK_URL }})
#            secondary_status_code=$(curl -s -o /dev/null -w '%{http_code}' ${{ vars.HEALTHCHECK_URL_SECONDARY }})
#            #status_code=500
#            #secondary_status_code=404
#            printf "The response code is: %d\n" "$status_code"
#            printf "The secondary response code is: %d\n" "$secondary_status_code"
#
#            if [ "$status_code" -eq 200 ] && [ "$secondary_status_code" -eq 200 ]; then
#              attempts=$((attempts+1))
#              echo "health_code=$status_code" >> $GITHUB_OUTPUT
#              echo "health_code_secondary=$secondary_status_code" >> $GITHUB_OUTPUT
#              sleep 3
#            else
#              echo "health_code=$status_code" >> $GITHUB_OUTPUT
#              echo "health_code_secondary=$secondary_status_code" >> $GITHUB_OUTPUT
#              printf "The application has issues starting up, check the logs!"
#              exit 1
#            fi
#          done
#
#      - name: Fail the job
#        shell: bash
#        id: service_status
#        run: |
#          exit 0

#      - name: Dump GitHub context
#        env:
#          GITHUB_CONTEXT: ${{ toJson(github) }}
#        run: echo "$GITHUB_CONTEXT"
#
#      - name: Prettify output
#        if: always()
#        id: pretty_output
#        shell: bash
#        run: |
#          pretty_app="UNKNOWN"
#
#          if [ "${{ matrix.apps }}" == "cms" ]; then
#            pretty_app="CMS"
#          elif [ "${{ matrix.apps }}" == "api" ]; then
#            pretty_app="API"
#          elif [ "${{ matrix.apps }}" == "data-storage" ]; then
#            pretty_app="Data Storage"
#          elif [ "${{ matrix.apps }}" == "zk-verifier" ]; then
#            pretty_app="ZK Verifier"
#          fi
#
#          echo $pretty_app
#          echo "app_name=$pretty_app" >> $GITHUB_OUTPUT
#
#      - name: Set changes
#        if: always()
#        id: changes_output
#        shell: bash
#        run: |
#          changes="Manual deploy"
#
#          if [ "${{ github.event.pull_request }}" != "" ]; then
#            changes="${{ github.event.pull_request.title }} (<${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.number }}>)"
#          else
#            commit_message="$(git log --pretty=%B -1 ${{ github.sha }} | cat - | head -n1)"
#            changes="Manual deploy: $commit_message - <${{ github.event.repository.html_url }}/commit/${{ github.sha }}|${{ github.sha }}>"
#          fi
#
#          echo $changes
#          echo "changes=$changes" >> $GITHUB_OUTPUT
#
#      - name: Check output
#        if: always()
#        shell: bash
#        run: |
#          echo ${{ steps.service_status.outcome }}
#          echo ${{ steps.service_status }}
#          echo ${{ steps.health_status.outputs.health_code }}
#          echo ${{ steps.health_status.outputs.health_code_secondary }}
#
#      - name: Notify
#        uses: ravsamhq/notify-slack-action@v2
#        if: always() && steps.health_status.outputs.health_code == 200 && steps.health_status.outputs.health_code_secondary == 200
#        with:
#          status: ${{ job.status }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          notification_title: ""
#          message_format: "{emoji} *${{ steps.pretty_output.outputs.app_name }}* deployment to DEV has {status_message} ${{ steps.service_status.outcome != 'success' && '<!here>' || '' }}
#          \n\n<${{ vars.APP_URL }}|View URL> | <${{ vars.GRAFANA_URL }}&from=${{ steps.rollout.outputs.rollout_time }}|View Grafana>
#          \n\n*Changes*\n ${{ steps.changes_output.outputs.changes }}"
#          footer: "Linked repo <{repo_url}|{repo}> | <{workflow_url}|View workflow> | <{run_url}|View runs>"
#          notify_when: "success,failure"
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
#
#      - name: Notify
#        uses: ravsamhq/notify-slack-action@v2
#        if: always() && (steps.health_status.outputs.health_code != 200 || steps.health_status.outputs.health_code_secondary != 200)
#        with:
#          status: ${{ job.status }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          notification_title: ""
#          message_format: "{emoji} *${{ steps.pretty_output.outputs.app_name }}* deployment to DEV has {status_message} ${{ steps.service_status.outcome != 'success' && '<!here>' || '' }}
#          \n\n<${{ vars.APP_URL }}|View URL> | <${{ vars.GRAFANA_URL }}&from=${{ steps.rollout.outputs.rollout_time }}|View Grafana>
#          \n\n*Healthcheck status*\n ${{ vars.HEALTHCHECK_URL }} :arrow_right: *${{ steps.health_status.outputs.health_code }}*\n ${{ vars.HEALTHCHECK_URL_SECONDARY }} :arrow_right: *${{ steps.health_status.outputs.health_code_secondary }}*
#          \n\n*Changes*\n ${{ steps.changes_output.outputs.changes }}"
#          footer: "Linked repo <{repo_url}|{repo}> | <{workflow_url}|View workflow> | <{run_url}|View runs>"
#          notify_when: "success,failure"
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

#  release:
#    name: Release
#    runs-on: ubuntu-latest
#    needs:
#      - versions
#    strategy:
#      matrix:
#        node-version: [ 18.17 ]
#        pnpm-version: [ 8.9.2 ]
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#      - uses: pnpm/action-setup@v2.4.0
#        name: Install pnpm
#        id: pnpm-install
#        with:
#          version: ${{ matrix.pnpm-version }}
#          run_install: false
#
#      - name: Get pnpm store directory
#        id: pnpm-cache
#        run: |
#          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
#
#      - uses: actions/cache@v3
#        name: Setup pnpm cache
#        with:
#          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
#          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#          restore-keys: |
#            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#
#      - uses: actions/setup-node@v3
#        with:
#          cache: 'pnpm'
#          node-version: ${{ matrix.node-version }}
#
#      - name: Install Dependencies
#        run: |
#          pnpm install --no-frozen-lockfile
#
#      - name: Check version yet again
#        run: |
#          cat packages/first/package.json