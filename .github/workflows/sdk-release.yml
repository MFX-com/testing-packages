name: SDK Release

on:
  push:
    branches:
      - main

jobs:
  versions:
    name: Versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
#        node-version: [ 18.17 ]
#        pnpm-version: [ 8.6.10 ]
        apps:
          - api
          - cms
    environment:
      name: ${{ matrix.apps }}-dev
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

#      - name: Config git user
#        run: |
#          git config --global user.name "${{ github.actor }}"
#          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

#      - name: Config git user
#        run: |
#          git config --global user.name "github-actions[bot]"
#          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Config git user
        run: |
          git config --global user.name "nexera-release[bot]"
          git config --global user.email "137495321+nexera-release[bot]@users.noreply.github.com"

      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v3
        with:
          cache: 'pnpm'
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: |
          pnpm install --no-frozen-lockfile

#      - name: Bump versions
#        run: |
#          lerna version --conventional-commits --no-git-tag-version --yes

#      - name: Bump versions
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          lerna version --yes --changelog-preset=angular --conventional-commits --message 'chore(release): version and release commit'

#      - name: Bump versions
#        env:
#          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
#        run: |
#          lerna version --yes --no-commit-hooks

      - name: Bump versions
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          lerna version --yes

#      - name: Bump versions
#        run: |
#          pnpm run --filter "@MFX-org/first" bump
#          pnpm run --filter "@MFX-org/private" bump
#          pnpm run --filter "@MFX-org/second" bump

      # People can bump manually a package in their merge request
      # Once merged to development, it will automatically take it in consideration
      #
      # Otherwise, it will create a patch version
#      - name: Create changeset file
#        shell: bash
#        run: |
#          ls -al
#          touch .changeset/my-commit-message.md
#          cat <<EOF > .changeset/my-commit-message.md
#            ---
#            "@MFX-org/second": patch
#            ---
#
#            AAA
#          EOF
#
#      - name: Bump versions
#        shell: bash
#        run: |
#          echo "Bumping"
#          npx changeset version
#
#      - name: Commit & Push changes
#        uses: actions-js/push@master
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Check version
#        run: |
#          cat packages/first/package.json

#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#          token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Build
#        run: |
#          pnpm run build:@MFX-org/first
#          pnpm run build:@MFX-org/second

#      - name: Check version again
#        run: |
#          cat packages/first/package.json

#      - name: Publish to npm
#        env:
#          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          pnpm --filter "@MFX-org/first" publish --no-git-checks --registry https://npm.pkg.github.com/
#          pnpm --filter "@MFX-org/second" publish --no-git-checks --registry https://npm.pkg.github.com/

#      - name: Publish to public npm
#        env:
#          NPMJS_COM_TOKEN: ${{ secrets.NPMJS_COM_TOKEN }}
#        run: |
#          echo "//registry.npmjs.org/:_authToken=$NPMJS_COM_TOKEN" > .npmrc
#          pnpm --filter "@MFX-org/first" publish --access=public --no-git-checks --registry https://registry.npmjs.org/
#          pnpm --filter "@MFX-org/second" publish --access=public --no-git-checks --registry https://registry.npmjs.org/


#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@v2
#        if: success()
#        env:
#          SLACK_CHANNEL: nexera-alerts
#          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#          SLACK_ICON: https://avatars.githubusercontent.com/in/351476?s=48
#          SLACK_TITLE: My Title ${{ secrets.APP_ID }}
#          SLACK_MESSAGE: 'Post Content :rocket: ${{ secrets.APP_ID }}'
#          SLACK_USERNAME: nexera-bot
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      - name: Export timer variable
        id: rollout
        shell: bash
        run: |
          echo "rollout_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Check service status
        shell: bash
        run: |
          echo ${{ steps.rollout.outputs.rollout_time }}
          # Initial sleep to make sure they are running
          sleep 10
          attempts=0
          max_attempts=5
          while [ $attempts -lt $max_attempts ]; do
            status_code=$(curl -s -o /dev/null -w '%{http_code}' ${{ HEALTHCHECK_URL }})
            printf "The response code is: %d\n" "$status_code"
          
            if [ "$status_code" -eq 200 ]; then
              attempts=$((attempts+1))
              sleep 3
            else
              printf "The application has issues starting up, check the logs!"
              exit 1
            fi
          done

#  release:
#    name: Release
#    runs-on: ubuntu-latest
#    needs:
#      - versions
#    strategy:
#      matrix:
#        node-version: [ 18.17 ]
#        pnpm-version: [ 8.6.10 ]
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#      - uses: pnpm/action-setup@v2.0.1
#        name: Install pnpm
#        id: pnpm-install
#        with:
#          version: ${{ matrix.pnpm-version }}
#          run_install: false
#
#      - name: Get pnpm store directory
#        id: pnpm-cache
#        run: |
#          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
#
#      - uses: actions/cache@v3
#        name: Setup pnpm cache
#        with:
#          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
#          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#          restore-keys: |
#            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#
#      - uses: actions/setup-node@v3
#        with:
#          cache: 'pnpm'
#          node-version: ${{ matrix.node-version }}
#
#      - name: Install Dependencies
#        run: |
#          pnpm install --no-frozen-lockfile
#
#      - name: Check version yet again
#        run: |
#          cat packages/first/package.json